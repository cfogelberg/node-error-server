{
  "name": "grunt-synchard",
  "description": "rsync task handler.",
  "version": "0.3.0",
  "homepage": "https://github.com/reidransom/grunt-synchard",
  "author": {
    "name": "Reid Ransom",
    "email": "reid@reidransom.com",
    "url": "http://reidransom.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/reidransom/grunt-synchard.git"
  },
  "bugs": {
    "url": "https://github.com/reidransom/grunt-synchard/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/reidransom/grunt-synchard/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "rsyncwrapper": "0.0.19"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt": "~0.4.1",
    "grunt-mocha-test": "~0.7.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-synchard\n\n> rsync task handler.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n    npm install grunt-synchard --save-dev\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n    grunt.loadNpmTasks('grunt-synchard');\n\n## The \"synchard\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `synchard` to the data object passed into `grunt.initConfig()`.\n\n    grunt.initConfig({\n        synchard: {\n            options: {\n                // Task-specific options go here.\n            },\n            your_target: {\n                // Target-specific file lists and/or options go here.\n            },\n        },\n    })\n\nThis task runs the command-line program `rsync`.  It comes with minimal defaults and allows for lots of customization.\n\n### Options\n\n#### options.args\nType: `Array`\nDefault value: `['--archive']`\n\nAn array of args to be passed to `rsync`.\n\n#### options.exclude\nType: `Array`\nDefault value: `[]`\n\nAn optional array of rsync patterns to exclude from transfer.\n\n#### options.mkdirp\nType: `Bool`\nDefault value: `false`\n\nIf true, the destination folder and parent folders will be created as necessary.\n\n#### options.ssh\nType: `Bool`\nDefault value: `false`\n\nRun rsync over ssh.  This is `false` by default.  To use this you need to have public/private key passwordless SSH access setup and working on your workstation.  If set to `true`, you should specify a hostname as part of your src or dest options.\n\n#### options.port\nType: `String`\nDefault value: `undefined`\n\nIf your ssh host uses a non standard SSH port then set it here. Example, `\"1234\"`.\n\n#### options.privateKey\nType: `String`\nDefault value: `undefined`\n\nTo specify an SSH private key other than the default for this host. Example, `\"~/.ssh/aws.pem\"`\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to copy multiple files from `src` to `dest/default_options`.\n\n    grunt.initConfig({\n        synchard: {\n            default: {\n                files: {\n                    'dest/default_options': ['src/testing', 'src/123']\n                }\n            }\n        }\n    })\n\nThis would be the output.\n\n    rsync ./src/testing ./src/123 ./dest/default_options --archive\n\n#### Dry Run\n\nIf you invoked `grunt` for the above config with the command-line option `--dry-run` like this:\n\n    $ grunt --dry-run\n\nthe output would look something like this:\n\n    rsync test/src/testing test/src/123 tmp/default_options --archive --dry-run --verbose\n    building file list ... done\n    created directory tmp/default_options\n    123\n    testing\n\n    sent 98 bytes  received 32 bytes  260.00 bytes/sec\n    total size is 12  speedup is 0.09\n\n#### Custom Options\nIn this example, the folder `src` is copied to `dest/custom_options`.  Custom options are used to display verbose `rsync` output and exclude the `123` file.\n\n    grunt.initConfig({\n        synchard: {\n            custom: {\n                options: {\n                    args: ['-av'],\n                    exclude: ['123']\n                },\n                files: {\n                    'dest/custom_options/': ['src/']\n                }\n            }\n        }\n    })\n\nAssuming `src` contains two files `123` and `testing`, this would output:\n\n    rsync ./src/ ./dest/custom_options/ --exclude=123 -av\n    building file list ... done\n    ./\n    testing\n\n    sent 147 bytes  received 48 bytes  390.00 bytes/sec\n    total size is 7  speedup is 0.04\n\n#### Remote Destination\n\n    grunt.initConfig({\n        synchard: {\n            remotedest: {\n                options: {\n                    ssh: true\n                },\n                files: {\n                    'user@example.com:dest/': ['src/']\n                }\n            }\n        }\n    })\n\n#### Remote Source\n\n    grunt.initConfig({\n        synchard: {\n            remotesrc: {\n                options: {\n                    ssh: true\n                },\n                files: {\n                    'dest/': ['user@example.com:src/']\n                }\n            }\n        }\n    })\n\n## Testing\n\nYou can test local rsync tasks with:\n\n    $ grunt test\n\nYou can test local and remote rsync tasks by first making sure you have password-less ssh key access to a server (ex: `user@example.com`) and then running:\n\n    $ grunt test --host user@example.com     # READ ON BEFORE RUNNING THIS\n\nBe careful!  This will remove files from `user@example.com:synchard_test`.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n0.2.0 - Added `ssh` and `mkdirp` options.\n\n0.1.0 - Initial Release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-synchard@0.3.0",
  "dist": {
    "shasum": "9f15d3eb3875394f93cffb84323a0f0f3d2271f6"
  },
  "_from": "grunt-synchard@0.3.x",
  "_resolved": "https://registry.npmjs.org/grunt-synchard/-/grunt-synchard-0.3.0.tgz"
}
